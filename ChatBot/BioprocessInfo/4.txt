Part four

DESIGN OF THE INTELLIGENT CONTROL STRUCTURE

In this chapter, the control structure component blocks will be designed from both algorithmic and 
soft development points of view. Mainly, three bioprocess types will be analyzed: enzymatic 
hydrolysis of wheat straw, alcoholoxydase obtaining with the methylotrophic yeast Hansenula 
polymorpha and yeast growth on simulated liquor. Hence, it will be interpreted the configuration 
aspects and the soft implementation to the block level structure (i.e. filter, estimation, pattern 
recognition, fuzzy control and expert systems. Moreover, a specific database will be configured on 
AS400 system, with specific structure for each analyzed case.
|
4.1. T HE E X P E R T S Y S T E M
Following the demonstration presented in #3.3, the expert system must select, based on a priori 
information outfitted by the human operator, the bioprocess class corresponding to the considered 
fermentation process. After the class selection, and based on pattern recognition (through a neural 
network), the corresponding bioprocess model evolution is chosen. Once the model selection, the 
optimal values can be (analytically) calculated and transferred as set point values to the fuzzy 
control  block. Hence, the expert system performs as supervisor within the framework of the 
intelligent control structure.

Structurally, the expert system is based on human expert knowledge, formalized as logical rules. 
The term “rules” has a large meaning. It includes different elements and knowledge corresponding to 
the bioprocess,
i.e. the main process parameters, the general evolution  curves, etc. The knowledge  is configured  
as syntactical forms, if...then. Hence, after the rule selection by the expert system, the 
corresponding bioprocess control strategy (based on human knowledge) is applied. Moreover, the 
expert system must supervise the whole control system, in order to change the global control 
strategy (if there is non-optimal) and even stop the bioprocess if the metabolic evolutions are 
troubled.
|
4.1.1. The a priori information

Corresponding to the bioprocess start time (to=0), a priori information is needed (cf. #3.3). These 
information concern to process type selection. Three bioprocess types will be analyzed in this 
work:
-  Enzymatic hydrolysis of a lignocellulosic substrate (wheat straw);
-  Alcoholoxydase  obtaining  with  the methylotrophic   yeast   Hansenula polymorpha
-  Yeast cultivation on simulated liquor.

Hence, the human operator must select one of these three bioprocess types. The expert system checks 
the corresponding routines (see Table 1) enclosed in each block. Obviously, the modeling/control 
structure is good defined from the commencement (evolution patterns, necessary estimated 
parameters, and fuzzy strategy);  only  the  evolution  type  (e.g. inhibitory/non-inhibitory 
process, etc.) and the optimum  parameter  values  must  be determined.

These  steps  can  be  performed  (from procedural point of view) through two files: SELECT.H and 
SELECT.C. Note that the function SELECT.C is based on a case structure: each bioprocess type calls 
the specific routines (see Table 1).
|
4.1.2. The knowledge database

The necessary knowledge for bioprocess control can be defined at this level because the expert 
system must coordinate the control structure. The human expert defines this knowledge for each 
instance.

The knowledge database for the enzymatic hydrolysis of wheat straw

In this case the knowledge database is composed of two working hypotheses:
-  Non-inhibitory process; in this case the Michaelis & Menten equation is available;
-  Inhibitory  process;  the  evolution corresponds to 3.1.4.1 equation.
|
The neural net for pattern recognition detects    procedure for the hydrolysis rate estimation: the 
most probable model evolution. Hence, the    the LS (Less Squares) method (in the first expert 
system selects (in the Set Point    case) and the conjugate gradient method (for Estimation  Block) 
the  corresponding    the second one).
|
The Neural Net for Parameter Estimation is active only if equation 3.1.4.1 is checked (an
inhibitory bioprocess). Moreover, the expert system must stop the control structure
functionality if a component block of the intelligent  control  structure  reports  an irremediable 
error.
|
The soft implementation can be realized through two working files: KBEH.H and KBEH.C. The procedure 
KBEH.C is founded on a case statement with two possibilities: non- inhibitory and inhibitory 
bioprocess.
|
The knowledge database for alcoholoxydase obtaining with the methylotrophic yeast Hansenula 
polymorpha

In this case (cf. #3.1.3) the knowledge database consists of the following working hypothesis:
-  The product formation respects Gaden equation (i.e. the cell concentration, X, is equal to the 
threshold value, Xp;
-  The product formation refers to equation 3.1.3.1.
Due to the fact that NNPR selects the bioprocess evolution curve, the expert system (through SPEB) 
picks out the corresponding procedure for Xp determination. If X=Xp9 the bioprocess  evolution  
agrees  with  Gaden model (cf. #3.1.3). The Neural Net for Parameter Estimation is active only if 
equation is checked (extended Gaden model). Furthermore, the expert system must stop the control 
structure running if a component block of the intelligent control structure reports an irremediable 
error.
|
The soft configuration of knowledge database can be achieved through two files KBAP.H and KBAP.C; 
the procedure KBAP.C can be built on a case statement, too: Gaden model and extended Gaden 
equation.
|
The most widely used and easily recognized neural  network  is  the  backpropagation network 
(Karim, Rivera, 1992). By some estimates (Welstead, 1994) it accounts for 90 percent of all neural 
network applications. The terminology backpropagation as a name for the network is misnomer, as 
this term actually refers to a training algorithm rather than network architecture. The network can 
be more properly called a feedforward neural network.
|
The widespread applicability of feedforward networks comes from the fact that three-layer 
feedforward  networks  are  universal approximators  (Hornik  et  al,  1989; Kuschewski et al., 
1993). In fact, the Stone- Weierstrass theorem is used to prove this property. Note that this is an 
existence result, as opposed to a constructive result.
|
4.2.1. Building a feedforward network structure

One of the details that must be addressed when building complete neural net structure is the matter 
of getting data to the network (Rohwer, Renals, 1991; Kazakos, Kazakos, 1989). In this section the 
necessary procedures to read, store and process training  data will be described.
|
Hence, the header file TRN.H (for the training file  procedure)  defines  a  training_rec 
structure, which holds all of the arrays and variables needed to store and manipulate the training 
data. Note the use of the variable allocated, which acts as boolean flag to indicate whether or not 
the arrays in the structure have been allocated in memory. This flag can be checked prior to 
freeing the allocated array pointers, rather than checking
each pointer separately (to avoid the potential problem of freeing an unallocated pointer — a sure 
way to crash the system).
|
The training data can be handled through an editor,  in  a  text  file.  The  procedure TRNPRCS.C 
is designed to manipulate the training data. Note that the training file does not directly provide 
the number of training items. This information is determined from the file size, i.e. the utility 
open input textale  — in the UT.LIB library, header file UT.H (see Annex) — returns the file size. 
It is important that all the training data items occupy the same length in the file — obviously the 
procedure will not work.
|
The header file FF.H defines the types, variables, and functions needed for the feedforward 
network. A structure type called network rec defines the network itself. The hidden layer nodes as 
well as the weight arrays are of type double. The structure type weights rec contains both the 
input and output layer weight arrays.

The structure ff_setup_rec is the setup structure for the feedforward neural network. The 
explanation of each field is given below:
-  error threshold— the error tolerance to be satisfied during training;
-  start iter — normally set to 0; this field can have other values when training is interrupted 
and the user wishes to keep track of the total number of training iterations;
-  no of inputs — number of inputs;
-  no_of_hd nodes — number of hidden nodes;
-  no of outputs — number of outputs;
-  in weight fromale — boolean flag: when set to true the order of training items is randomly 
shuffled using the function shuffi (UTSHUFFL.C in UT.LIB) at each iteration of backpropagation;
-  files — substructure containing the file names defined inJ/es name rec (UT.H);
-  sigmoid out — boolean flag; indicates when a sigmoidal function is used in the output layer 
(/rHe) or a linear function is used ifalse),‘
-  learning_rate — the learning rate;
-  weight_rang — the weights are initialized to random values between z weight range
-  FFDISPL: the procedure to display neural net training progress on screen;
-  FFWTS: allocate, read in, write out feedforward network weights;
-  FFEEDFW: procedure(s) for feedforward network.
|
The file 1-1-EEDFW.C  implements  the definition of the feedforward network. The sigmoid function 
checks its arguments for size
Moreover, it is necessary  to build an    before applying the exponential function (in application 
library utilizable by each structure    order to save potential floating-point overflow module 
(FF.LIB). Hence, the library consists    problems). The function feedforward receives of the 
following procedures:           its networks and weights arrays via parameters
-  FFTRAIN: the feedforward net training    from an application-calling program.
procedure;

-  FFBACKPR:  the  backpropagation training  algorithm  for  feedforward network;
The  backpropagation  algorithm  is implemented  in  file  FFBACKPR.C.The momentum weights values 
are initialized to
0.0 using iniatilize_weights (in FFWTS.C).
|
The procedure train network from data in file FFTRAIN.C is the general-purpose training procedure; 
its logic flow (operational description) is shown below:
-  Get the training data;
-  Get the weights (either from a file or randomly initialized);
-  Run the training algorithm;-  Free up the training data and weights.
|
The pattern recognition procedure (Megan, Cooper, 1995; Megan, Cooper, 1994; Megan, Cooper, 1992; 
Hinde, Cooper, 1993) can be represented as a function from a space of images to a finite 
dimensional vector space (fig. 4.2.2):
|
Hence, the function assigns a specific vector to each image (Welstead, 1994). The neural networks 
can be considered as universal estimators (Wills et al., 1991); they can approximate any 
well-defined function to any desired degree of accuracy. Thus, there is a feedforward network that 
can approximate the pattern classification function shown in fig.
4.2.2. The number of inputs to this network is the length of the image vector and the number of 
outputs is the length of the classification vector. As usual, it is not known the number of 
hidden-layer  nodes.  Conforming  previous studies (Press, 1992; Chidambaram, 1992), a number 
corresponding to the number of output nodes seems to be sufficient.
|
Hence, the header file PATTERNS.H defines the constants, types and variables needed for the pattern 
editing. The text characters BLOCK 1 and BLOCK 3defined in the utility header UTTYPES.H (see Annex) 
are the display characters for representing the two binary states for the image pixels. The binary 
states are represented internally by the value
+1 (NODE HIGH) and -1 (NODE LOW).
Furthermore,     the     structure pattern_display_data   holds   relevant information describing 
the type and number of patterns; this information comes from the user interface.
|
Taking into account the bioprocess specificity, the parametric implementation of neural nets 
presents distinct features, which will be
presented below. Hence, following the precedent demonstration, the neural networks can make good 
parameter estimation, if the training data is valuable. In the mean time, the bioprocess  
reproducibility is a relative
|
In the subsequent paragraphs it will be analyzed the neural nets for the specific bioprocesses, 
with focus on the specific particularities. From the structural point of view, the neural networks 
are identically designed:
-  Each neural net is composed of three layers (one hidden layer);
-  The neuron number from the hidden layer is just the same as the neuron number from the output 
layer.
|
4.2.3.1. Enzymatic hydrolysis of wheat straw

Following the ideas presented in #3.1.4, the enzymatic hydrolysis rate is characterized by an 
equation v = f(S) which is strongly non- linear. Due to the laboratory measurement specificity, the 
substrate concentration and the enzymatic hydrolysis rate were determined off-line. For this 
reason, it is necessary to esteem these parameter values at each sample time. An adequate method is 
through an interpolating polynomial. In this case, the temperature  and  pH  values  are  also 
determined.
|
The network is completely interconnected on account of theoretical impossibility to discern about 
the input influence on output variables.

Moreover,  the  weights  are  randomly initialized due to the scarcity of studies concerning the 
optimal values for weight initialization.
|
The network is completely interconnected, too, for the same reasons as the previous case. Also, the 
weights are randomly initialized due to the scarcity of studies concerning the optimal values for 
weight initialization.
For this type of bioprocess (cf. #3.1.6) the inhibitor concentration time variance and the specific 
growth rate connection with inhibitor
X
concentration (eq. 3.1.6.2) are to be taken into consideration. In this case the network inputs are 
cell concentration (measured off line), substrate concentration (measured off line), inhibitor 
concentration (measured off line), temperature and stirrer speed. The off line variables are 
esteemed at each sample time through an interpolating polynomial.

The network output variables are Ki, K2, K3 (see eq. 3.1.6.2). The network configuration is 
presented in fig. 4.2.6:
|
Similar to precedent cases and for the same considerations the network is completely interconnected 
and the weights are randomly initialized.
|
4.2.4.  Neural  network  for  pattern recognition design

Transformation of characteristic curves in (low resolution) standard pictures remove details but 
provides noise reduction and faster calculation (Garrido-Sanchez, et al., 1993). Moreover, a local 
evolution variation has a punctual influence on the general bioprocess evolution and sampling time 
variation has only few influences. Indeed, each pixel usually corresponds to several experimental 
data, and thus, this method retains only the general shape of the curve. Picture size is chosen as 
small as possible to ensure correct determination of kinetic facts.

The neural network utilization is focused in these conditions on curve classification without 
parameter identification, in view of bioprocess qualitative evolution type.

From a structural point of view, the neural network contains 25 inputs (according to y=f(x) graphic 
formalization, i.e. (x1, y1); (x2,yl); ...(x1, y2);...(x5, y5)) and a number of outputs 
corresponding to the number of classification  curves  (e.g.  bioprocess with/without inhibition, 
etc.). The neuron number on the hidden layer is identical to the neuron number on the output layer 
(cf. #4.2.3).

Concerning the former, human expert selects theoretical curves (a priori information) that 
determine the exemplar vectors. The picture resolution is 5x5 and a pixel is highlighted (i.e. set 
to high value +l) if at least one point is present in this area. When the pattern recognition 
(classification) occurs, only a single output is selected, according to human expert 
classification.
|
Hence, the neural network will have two outputs (and implicitly, two neurons on the hidden layer). 
The outputs accord with two linguistic variables: “non-inhibiting process”,
i.e. equation Michaelis & Menten is applicable and “inhibition process”, i.e. the enzymatic 
hydrolysis process agrees with eq. 3.1.4.1.

The training values correspond to the square shown in fig. 4.2.8. Hence, the input values are: 
x1=1; yl=l; x1=1; y2=0; xl=l; y3=1..., x4=0; y1=0;...x4=l; y4=1;...x5=0; y5=0 (non-
inhibition process), and xl=l; yl=l; x1=1; y2=l;  x1=1;  y3=l,...,x4=1; yl=l;...x4=1;
y4=l;...x5=0; y5=0 (inhibition process).

If the process evolution agrees with curve (a), the output “non-inhibition process” will be set; if 
the process evolution corresponds to curve
(b), the output “inhibition process” will be
active.

The network is fully connected and the initial weight values are randomly initialized.
|
4.2.4.2. Neural net for pattern recognition applied in alcoholoxydase obtaining with the  
methylotrophic  yeast  Hansenula polymorpha

There are three evolution classes for this bioprocess type, due to enzyme accumulation in the first 
region of the exponential phase (eq. 3.1.3.1).  Taking  into  consideration  the threshold value 
(Xp), the three categories can be reduced to two: standard Gaden evolution (if X = Xp) and 
conforming to eq. 3.1.3.1 otherwise.
|
Fig. 4.2.8 The digitized evolution curves for the enzymatic hydrolysis of wheat straw; a), b) 
non-inhibition bioprocess; c) d) inhibition bioprocess

Hence, the neural net has 25 inputs, two outputs, and two neurons on the hidden layer, like the 
precedent case (see fig. 4.2.9).
|
The two outputs are assigned to the following linguistic labels: “Gaden Equation” if the threshold  
value  is  equal  to  biomass
14
concentration and “Extended Equation” if the values are different.
|


The training values agree with the pixel structure. The net is fully interconnected and the weight 
values are randomly initialized, too.

4.2.4.3. Neural net for pattern recognition applied in yeast cultivation on simulated liquor

The yeast cultivation on simulated liquor focuses on inhibitory effect of the acetic acid delivered 
in medium (cf. #3.1.6). Hence, eq.
3.1.6.2 harmonizes with Monod equation taking into consideration the inhibitory effect. If the 
influence is low (inhibitor concentration
is small, Iz0), the classical Monod relation is advantageous; in proportion as the acetic acid 
concentration increases (but not bigger than Ir+) the population dynamic decreases and eq.
3.1.6.2 is to be appliable.

The neural net contains two outputs in agreement with the existence/absence of inhibitor.
|
The design of a fuzzy control system arises from organization necessity of the human expert  
knowledge.   The  decisional quintessence  of  the  control  system  is determined  by the 
transition  from the information objective level to the subjective one (i.e. the information 
version level) (Srinivas, Chidambaram, 1995). Thus, the interest  is  focussed  on  human  expert 
experience (outlined through fuzzy rules) rather than information algorithmic process (Jecu, 
Caramihai, 1996).
|
Hence, in view of bioprocess specificity, the fuzzy control algorithm will be characteristic to a 
specific step evolution of the process (Besli et al., 1995).

Generally, fuzzy membership functions are the mechanism used by the fuzzy system to interface with 
the outside world (Ramkumar, Chidambaram, 1995; Hu, Yuan, 1995). The domain of membership function 
is the set of possible values for a given variable and the possible output values are the real 
interval [0,
(FAM) matrix. FAM matrices can have dimensions higher than two (i.e. the inputs number to the fuzzy 
rules determines the dimension). Hence, higher numbers of inputs produce “hypercube” FAM matrices. 
It is preferably to use more small FAM matrices (two- or three-dimensional) rather than a single 
higher dimensional matrix (Welstead, 1994), i.e. the system becomes more flexible and the 
computational power necessity is lower.
|
Defuzzification

The defuzzification process is based on SLIDE algorithm (Yager, Filev, 1993). Assume it is given a 
fuzzy set F with membership function wi defined on the discrete universe of discourse 
X={xi,...9Xn$. It shall assume that M = MaXi[Wi]. The first step in the SLIDE method of 
defuzzification is to transform F into E, another fuzzy set defined on the same universe of 
discourse, X. It shall denote the membership grades in E US Vi- The vI's are derived from the mI's 
|
There are three distinct types of trapezoid functions (fig. 4.3.1): those that open to left, those 
that open to right and the “regular” type
18
type (left, right, regular) and loaf values for the points a, b, c, and d. The structure also 
includes goal fields for the slopes of the left- and right-slanting line segments in the trapezoid. 
While this slope information is redundant since it can be determined from the point values, it is 
included in the structure to save computational time since these values are needed every time the 
trapezoid function is evaluated.

Two procedures in the file FLPRCS.C facilitate the use of the trapezoid structure type. Hence, the 
procedure init trapz returns a fully  initialized  trapezoid  structure.  If trapezoid were a C++ 
class then init_trapz would be its constructor.

The C function trapz is the actual trapezoid function. It takes a oak value and a trapezoid 
structure as its arguments and returns the oaf value that is the output value of the mathematical 
trapezoid function.

The concept of FAM matrix suggests that it should logically store fuzzy rules in a multidimensional 
array architecture. The number of rows and columns can be adjusted in order to accommodate 
different numbers of fuzzy sets per variable. Changing the dimensions of a storage array is a major 
code change (particularly in C), not only affecting the array architecture itself, but also likely 
effecting changes in the number of “for” loops that maneuver through it.
|
An alternative  to  storing  rules  in  a multidimensional array of fixed dimensions is to have 
each rule carry with it index information that specifies its location in a virtual multidimensional 
array. With this approach, the full array is not allocated; only those array entries that are 
actually used will be stored.

The structure type rule in FLOGIC.H defines the rules in this way. Hence, the one- dimensional 
array inp index holds the index values for the input variables. The one- dimensional array inp 
fuzzy set holds the index values for the corresponding fuzzy sets. These are index values that 
specify the location in the virtual FAM matrix. Finally,
|
The procedure fuzzy system in FLPRCS.C takes the fuzzy system structure and an array of input 
values and returns the defuzzified
the field out fuzzy set specifies the index value for the output.
The main advantages of this implementation type are:
-  The ability to handle multiple lower- dimensional    FAM    matrices simultaneously;
-  It is not necessary to specify all of the FAM matrix entries;
-  Very compact implementation of the defuzzification procedure.

The structure type fuzzy system rec in the header file FLOGIC.H contains all of the information 
needed to completely define a fuzzy system, i.e. membership functions, rules and output values.
|
The bioprocess output is dependent on substrate and biomass concentration, i.e. dP —— f(X,S), but 
only by the substrate
dt
addition the product rate is controlled.
The FAM matrix (fig. 4.3.6) can be developed in two steps: firstly, global process evolution was  
investigated;  secondly,  performance improvement was considered. The notations are the same; in 
addition we have: NB= Negative Big, NM= Negative Medium, NS= Negative Small, N = Negative; P = 
Positive.
|
3.   Fuzzy control of yeast cultivation on     determined) is due, on one hand, to inhibitor 
simulated liquor (cf. #3.1.6) is based on     accumulation  and on the other hand, to substrate 
addition control, considering the     substrate concentration changes. Hence, a specific growth 
rate dependence vs. substrate     control  structure is proposed (fig. 4.3.7), and  inhibitor  
concentrations,  q  =  f(S,I),     which can optimize cell growth and minimize conforming to eq. 
3.1.6.2. Hence, p deviation     inhibitor  influences  through  substrate from  the  optimum  value 
 (analytically     concentration.
|
The inputs of the fuzzy controller are specific growth rate error and inhibitor concentration and 
the output corresponds to the substrate concentration. From a technological point of view, the 
specific growth rate (implicitly) offers information on substrate concentration. Hence, the 
following FAM matrix can be proposed (fig. 4.3.8).

As can be seen, specific cases (e.g. big inhibitor concentration with zero error) cannot be 
defined,  conforming  to real  process behavior. Moreover, “zero” substrate addition is a “waiting” 
command, in order to check further process evolutions.
|
The control bioprocess procedures are generally built based on quantitative approach (i.e. 
correlation set-up) and starts with the measured/calculated process variables.

Hence, for an optimal control, it is necessary to filter the measured data, in order to eliminate 
the (inherent) mistaken information. The most possible causes that induce the data modification 
are:
-  Signal lost on transmission lines;
-  ADC  (Analog/Digital  Converter) defections;
-  Measurement equipment errors.

These wrong data can generate undesirable phenomena in the information base post- processing:
-  Increasing of the general level of noise;
-  Induction of frequency false components via spectral density.

Consequently, it is necessary to detect and eliminate  the wrong results from the bioprocess data 
sets.
|
The procedure must be supplemented with an additional  condition  that  restricts  the successive 
number of extrapolations (i.e. a permanent extrapolation must be avoided). On that account, the 
extrapolated values can take additional direction to real trajectory, after the detection of wrong 
value series (and thus, the correct data will be rejected).

Another filter procedure is based on Tukey's theory. This one considers that is more comfortable  
to  primarily  generate  an estimation of the smooth data evolution and then to reject the wrong 
values. The procedure utilizes the theorem that considers that median value of a data sequence 
represents a robust estimation. The algorithm is given below:

1. The sequence X’(i) is built firstly, based on median value of the sequence X(1) X(5).
This will be X'(3). X(1) is removed and X(6) added to data sequence. The new median value will be 
X’(4). The procedure goes  ahead  till  all  data  will  be covered.Note that the sequence X’(i) 
will have four elements less than initial sequence;
2. The sequence X"(i) will be built based on X’(i) succession, like the precedent step; in this 
case the element number of the data
|
The conceptual structure of an intelligent control system based on hybrid techniques implies the 
integration of contributions that the bioprocess control using a priori model can offer, i.e. 
analytical determination of maximum/minimum values according to corresponding model (Chouakri, et 
al., 1994; Chouakri, et al., 1995).

After the values were determined (Karim, Rivera, 1992), they are transferred to the control block 
as set-point values.

4.5.1. Enzymatic hydrolysis bioprocess of wheat straw

In agreement with #4.2.4.1, this kind of bioprocess is able to advance either on classical equation 
(Michaelis & Menten) or on the law defined by eq. 3.1.4.1. The neural network for pattern 
recognition performs the model  selection.  Hence,  the  set-point estimation block must
-  Establish the value of specific reaction rate
(Vmax)9lf the bioprocess is non-inhibitory;
-  Determine the values of specific reaction rate  and  (corresponding)  substrate concentration,  
if  the  bioprocess  is inhibitory.
|
In the first case, the determination of Vmax value can be performed through LS (Least Square) 
method, because Michaelis & Menten model  agrees  with  parameter  linear dependence.  The  
algorithm  can  be implemented via a C-function, CMMP.C. The input parameters are substrate 
concentration and specific  reaction rate and output parameters are considered Vmaxand K+. This 
function calls the UT library (see Annex) for matrices operations.

In the second case, parameter estimation is achieved through the Gradient Conjugates method.
The algorithm can be implemented via two files, CG.H (header) and CGPROCS.C. The function  
CGPROCS.C  must  find  the minimum/maximum point of a function whose definition is passed via the 
parameter obj n. The final vector solution is returned through the parameter weights and the value 
of the objective function is returned through the parameter obj value. The procedure stops either 
the imposed error tolerance (error tol) is exceeded or the solution is successfully found.
|
4.5.2. Alcoholoxydase obtaining with the methylotrophic   yeast   Hansenula polymorpha

Conforming to #3.1.3, the alcoholoxydase production  (enzyme  accumulation)  is characteristic to 
the early exponential growth phase. Hence, the corresponding model is the Gaden equation (if the 
threshold value, Xp is equal to the cell concentration, X), or 3.1.3.1 equation in all other cases.

Therefore, the set-point estimation block must find the cell concentration, X. For this purpose, 
the cell concentration is passed to the control block, incremented with 1%, till the threshold 
value is reached.

The determination of the cell concentration via equation 3.1.3.1 is performed through Runge- Kuta 
method, at each sampling period. The integration procedure is defined in distinct file, RK.C
|
4.5.3. Yeast growth on simulated liquor.

Following the ideas presented above (cf. #3.1.6), the yeast growth on simulated liquor occurs in 
accordance with specific conditions (i.e. acetic acid accumulation). In agreement with eq. 3.1.6.2, 
biomass growth can cumulate via the classical Monod model (in the inhibitor absence) or through a 
p=f(S,I) equation (in the
other case). The neural network for pattern recognition performs the model selection. The set-point 
estimation block must
-  Establish the value of specific growth rate ( max)91f the bioprocess is non-inhibitory (I 0);
-  Determine the values of specific growth rate  and  (corresponding)  substrate concentration,  if 
 the  bioprocess  is inhibitory (cf. eq. 3.1.6.2).
 |
In the first case, the determination of [lmax value can be performed through LS (Least Square) 
method, because Monod model agrees with  parameter  linear  dependence.  The algorithm can be 
implemented via the C- function, CMMP.C. The input parameters are substrate concentration and 
specific growth rate and output parameters are }lmax and Ks. This function calls the UT library 
(see Annex) for matrices operations.

In the second case, parameter estimation is achieved through the Gradient Conjugates method, 
presented above.
|
AS400 systems are well known for its ease for use, open standards (whereby the system architecture  
and  applications  allow  for expansion and scalability) and security (which helps for the 
acceptance  of  information technology) (Abergel, 1993, Rambaud, 1989). The bioprocess databases 
designed on this computer type offer the advantages of a large- scale information storing, which is 
directly or through a client/server structure available. The security level is based on access 
control (specific  information  should  only  be accessible by authorized personnel; controlled 
access allows  persons  with the required authorization to read and alter protected data files) and 
data integrity (it can be ensured that data are not changed by unauthorized persons after their 
transmission) (Caramihai et al., 1996).

The main advantages of this kind of database are:
-  Direct data access;
-  Maximum operation flexibility;
-  Easy to upgrade the system.
|
The AS400 database is configured as physical and logical files. The logical files are based on the 
information stored by physical files, which are structured conforming different criteria (IBM, 
1996). When a physical file is created, the key fields, the record name and the field description 
must be defined. Furthermore, the data type (packed, alphanumeric, etc.) must be determined  in 
order to fix the database consistency.

If the physical files hold data, the logical files arrange  the  information  by  taking  into 
consideration different criteria (keys). Hence, the main logical file characteristics are (Pichat, 
Bodin, 1990):
-  The data can be treated conforming to operator option;
-  The information selection (in the physical file) is directly performed;
-  A logical file can joint different physical files for better data use.

The physical/logical files can be accessed through display files and reported through printer files 
(IBM, 1996).
|
A printer file consists of more formats. The ordinary format is a printing line. Each format 
consists of zone description (i.e. length, attribute, key). The entire data ensemble is stored in a 
PRTF source file.

Like the printer files, the display files consist of more formats. In this case, the ordinary 
format is the screen line. Each format consists of zone description (i.e. length, attribute, key). 
The entire data ensemble is stored in a DSPF source file.
|
4.6.2. Hard & soft configuration

The following hardware configuration is necessary for the AS400 database design in a client/server 
structure:
-  AS400  computer  with  OS400/305 operating system;
-  Novell network server;
-  PAC network server;
-  Eight workstations.

This  configuration  assumes  a  soft development on the workstations, program generation on PAC 
server and program compiling on AS400.

The programs were developed in PACBASE (version 8.0.2, 1995; copyright GNA/France). Hence, the 
procedures were designed in PAC; the source  were  generated  in COBOL, transferred on AS400 and 
compiled.
The PAC programs run only on AS400 systems. There are three program types:
-  Display programs (TP): the operator can directly bring up to date the database;
-  Batch programs (B): the operator can indirectly bring up to date the database (periodically or 
by request);
-  Report programs

These programs can be launched via operator request or through CL routines (periodically).

The AS400 system communicates with the intelligent control system through a specific ODBC.
|
4.6.3.1. Database for yeast and fungi cultivation

Following the ideas presented above (cf. #3.1), the main parameters for a yeast or fungi 
cultivation bioprocess are pH, dissolved oxygen, stirred speed and pressure (for mechanical 
reactors), substrate concentration, dry  weight  (as  measurement  of  cell concentration), 
specific growth rate and product concentration (product formation rate). The corresponding database 
will include the specific physical files corresponding to these parameters, logical files (for 
direct access) and special joint files. The files standardization is shown below:

XX81- physical file;
XX01- main logical file;
XX02, XX03...- secondary logical files; JJ...- joint files.
Hence, the following physical files were created:
TE81 — temperature; PH81 - pH;
OX81 - oxygen; DE81 — air flow; TV81 — motor speed; SP81 - pressure;
SB81 — substrate concentration;
SU81 — cell  concentration  (dry weight);
MU81 — specific growth rate, q; PR81 — product concentration.

Each record has the following structure (fig. 4.6.1):
-  Experiment type: specifies the experiment type: biomass growth, product formation, etc. ; format 
10X;
-  Operation mode: defines the operation mode, i.e. batch, fed-batch or continuous; format 5X;
-  Reactor type: specifies the type of reactor: stirred speed reactor or air-lift reactor; format 
5X;
-  Microorganism  type:  names  the manipulated microorganism (Hansenula polymorpha, Candida, 
etc.); format l0X;
-  Environment type: specifies the culture medium type; format 10X;
-  Inoculum type: specifies the manipulated inoculum quantity; format S999;
-  Experiment number. format 9(4);
-  Date: defines the date of experiment; format YYYYMMDD;
-  Time: specifies the measurement instant; format HHMMSS (9(6));
-  Value. holds the measured parameter value; format S9(4)V9(4).
|
Each physical file has various associated logical files:

XX01 — main logical file (key structure: 1/2/3/4/5/6/7/8/9/);
XX02 — logical file, key: 3/1/2/4/5/6/7/8/9/; XX04 - logical file, key: 5/1/2/3/4/6/7/8/9/ XX05 - 
logical file, key: 4/2/3/5/6/7/8/9/; XX06 - logical file, key: 7/;

Moreover, the listed joint file were created for better information organization:
JO01 — identical key with XX01; JO02 - identical key with XX02; JO03 - identical key with XX03; 
JO04 - identical key with XX04; JO05 - identical key with XX05; JO06 - identical key with XX06.

These joint files were constructed through the attachment of the following logical files: pH, 
oxygen, biomass, substrate and product concentration.
|
Each record has the following structure (fig. 4.6.2):
-  Operation mode: defines the operation mode, i.e. static or stirred; format 8X;
-  Strain: specifies the strain type (e.g. (Aspergillus, Trichoderma, etc.); format 12X;
-  Substrate type: consist of the type of substrate; format 14X;
-  Experiment number: format 9(4);
-  Date: defines the date of experiment; format YYYYMMDD;
-  Time: specifies the measurement instant; format HHMMSS (9(6));
-  Value. holds the measured parameter value; format S9(4)V9(4).
|
Each record has the following structure (fig. 4.6.3):
-  Environment type. specifies the culture medium type; format l0X;
-  Inoculum type: specifies the manipulated inoculum quantity; format S999;
-  Experiment number: format 9(4);
-  Date: defines the date of experiment; format YYYYMMDD;
-  Time: specifies the measurement instant; format HHMMSS (9(6));
-  Value. holds the measured parameter value; format S9(4)V9(4).
|
CONCLUSIONS

In this chapter, the component blocks of an intelligent control structure were designed. Three 
bioprocess types were taken into consideration: enzymatic hydrolysis of a lignocellulosic substrate 
(wheat straw); alcoholoxydase obtaining with the methylotrophic yeast Hansenula polymorpha,‘ yeast 
cultivation on simulated liquor. Process class heterogeneity directs characteristic 
implementations; each case was treated separately, for all blocks.

Hence, the Filter block, identical for all cases, must “clean” input data, according to an imposed 
criterion.

The Neural Net for Parameter Estimation esteems the parameter values of the controlled bioprocess 
in agreement with a priori information transferred to expert system and the process evolution 
curve.

The Neural Net for Pattern Recognition must identify bioprocess type based on digitized standard 
curves, as part of a general process class, which was configured through a priori information.

The Fuzzy Control Structure controls bioprocess behavior, in agreement with specific rules 
established by the human expert.

The Expert System manages the general functionality of the control system. At this level, a 
specific information database was created compatible with process particularities.

Moreover, for each block of the intelligent control structure, the soft implementations and 
algorithm structures were specified

Finally, an AS400 database was built, in agreement with each bioprocess type.